import numpy as np
#感知机具体教程参考李航的统计学习方法第二章
#直接参考Python meachine learning那本书就可以了，讲的很清楚
'''
    注意numpy有的函数用法还是不一样的，有的是对象调用的，类似于那种实例函数
    而有的是静态函数，直接给np调用的，而穿进去的np的一个array对象
    enumberate可以进行计数，很方便的
    还有print在python3.5的变化
    特别是打印多个数据时，与C还是有些变化的
    eg.
    for idx,cl in enumerate(np.unique(a)):
    print('idx=%d,cl=%d' %(idx,cl)) 中间也没有了逗号了,感觉就很尴尬了
'''
class Perceptron(object):
    """Perceptron classifier.
    Parameters
    ------------
    eta:float,Learning rate (between 0.0 and 1.0)
    n_iter:int,Passes over the training dataset.

    Attributes
    -------------
    w_: 1d-array,Weights after fitting.
    errors_: list,Numebr of misclassifications in every epoch.
    """

    def __init__(self, eta=0.01, n_iter=10):
        self.eta = eta#学习速率
        self.n_iter = n_iter#迭代次数

    def fit(self, X, y):
        """Fit training data.先对权重参数初始化，然后对训练集中每一个样本循环，根据感知机算法学习规则对权重进行更新
        Parameters
        ------------
        X: {array-like}, shape=[n_samples, n_features]
            Training vectors, where n_samples is the number of samples and n_featuers is the number of features.
        y: array-like, shape=[n_smaples]
            Target values.
        Returns
        ----------
        self: object
        """
        #注意啊：这个地方只有pandas库导入的文件数据才有shape类型
        self.w_ = np.zeros(1 + X.shape[1])  # add w_0　　　　　#初始化权重。数据集特征维数+1。特征是features，加1了之后维数变多了
        self.errors_ = []  # 用于记录每一轮中误分类的样本数

        for _ in range(self.n_iter):#这个与我之前理解的稍微有点不同，这个每预测完一个样本，就立即进行权重和偏置的更新
            errors = 0
            for xi, target in zip(X, y):
                update = self.eta * (target - self.predict(xi))  # 调用了predict()函数
                self.w_[1:] += update * xi
                self.w_[0] += update
                errors += int(update != 0.0)
            self.errors_.append(errors)#这个errors适合for对齐的
        return self

    def net_input(self, X):
        """calculate net input"""
        return np.dot(X, self.w_[1:]) + self.w_[0]  # 计算向量点乘

    def predict(self, X):  # 预测类别标记
        """return class label after unit step"""
        return np.where(self.net_input(X) >= 0.0, 1, -1)


import pandas as pd  # 用pandas读取数据
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap
#from Perceptron_1 import Perceptron

df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data',
                 header=None)  # 读取数据还可以用request这个包
print(df.tail())  # 输出最后五行数据，看一下Iris数据集格式

"""抽取出前100条样本，这正好是Setosa和Versicolor对应的样本，我们将Versicolor
对应的数据作为类别1，Setosa对应的作为-1。对于特征，我们抽取出sepal length和petal
length两维度特征，然后用散点图对数据进行可视化"""#确实只取了前100个
y = df.iloc[0:100, 4].values #取出特征，注意取出是Series类型，所以得加values
y = np.where(y == 'Iris-setosa', -1, 1)
X = df.iloc[0:100, [0, 2]].values #仅仅抽出了两维特征
plt.scatter(X[:50, 0], X[:50, 1], color='red', marker='o', label='setosa')#这里的label不是平常的label，是给legend()用的
plt.scatter(X[50:100, 0], X[50:100, 1], color='blue', marker='x', label='versicolor')
plt.xlabel('petal length')
plt.ylabel('sepal lenght')
plt.legend(loc='upper left')#设置图例的显示位置
plt.show()

# train our perceptron model now
# 为了更好地了解感知机训练过程，我们将每一轮的误分类
# 数目可视化出来，检查算法是否收敛和找到分界线
ppn = Perceptron(eta=0.1, n_iter=10)#建立一个感知机对象了，此处还修改了学习速率
ppn.fit(X, y)#训练模型
plt.plot(range(1, len(ppn.errors_) + 1), ppn.errors_, marker='o')
plt.xlabel('Epoches')
plt.ylabel('Number of misclassifications')
plt.show()

# 画分界线超平面
def plot_decision_region(X, y, classifier, resolution=0.02): #分类器传进去了
    # setup marker generator and color map
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))]) #np.unique(y)就只有1和-1了

    # plot the desicion surface
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1

    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)#ravel函数是将矩阵平铺
    Z = Z.reshape(xx1.shape)

    plt.contour(xx1, xx2, Z, alpha=0.4, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())

    # plot class samples
    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1], alpha=0.8, c=cmap(idx), marker=markers[idx], label=cl)
        #此处并没有分类，只是把两个维度的特征可视化，此处y==cl需要特别注意，取X也就是样本数据的第0列和第一列，然后画图

plot_decision_region(X, y, classifier=ppn) #然后再把决策面画出来
plt.xlabel('sepal length [cm]')
plt.ylabel('petal length [cm]')
plt.legend(loc='upperleft')
plt.show()